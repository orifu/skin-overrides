plugins {
	id 'maven-publish'
	id 'org.quiltmc.loom'
}

base {
	archivesName = project.archives_base_name
}

var mcVersion = property("deps.minecraft")
version = "${project.version}+${mcVersion}"
group = project.maven_group

var hasUi = stonecutter.compare(mcVersion, "1.19.4") >= 0;
var awVersion =
		stonecutter.compare(mcVersion, "1.20.2") >= 0
				? "1.20.2"
		: stonecutter.compare(mcVersion, "1.20.1") >= 0
				? "1.20.1"
		: stonecutter.compare(mcVersion, "1.19.3") >= 0
				? "1.19.3"
				: "1.19.2";

if (stonecutter.current.isActive) {
	rootProject.tasks.register('client') {
		group 'project'
		dependsOn tasks.named('runClient')
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		name "Modrinth"
		url "https://api.modrinth.com/maven"
	}

	// for some reason using the terraformers maven version of
	// modmenu breaks quilt loader.
	// maven {
	// 	name "Terraformers"
	// 	url "https://maven.terraformersmc.com"
	// }
}

if (hasUi) {
	sourceSets.main.java {
		srcDirs += ['src/ui/java']
	}
}

loom {
	// Loom and Loader both use this block in order to gather more information about your mod.
	mods {
		// This should match your mod id.
		"skin_overrides" {
			// Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
			sourceSet sourceSets.main

			// If you shade (directly include classes, not JiJ) a dependency into your mod, include it here using one of these methods:
			// dependency("com.example.shadowedmod:1.2.3")
			// configuration("exampleShadedConfigurationName")
		}
	}

	accessWidenerPath = getRootProject().file("src/main/resources/${awVersion}.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${mcVersion}"
	mappings "org.quiltmc:quilt-mappings:${property("deps.quilt_mappings")}:intermediary-v2"
	modImplementation "org.quiltmc:quilt-loader:${property("deps.quilt_loader")}"

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	// modImplementation libs.quilted.fabric.api
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one

	modImplementation "maven.modrinth:modmenu:${property("deps.modmenu")}"

	modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${property("deps.fabric_api")}"
	modRuntimeOnly "maven.modrinth:ears:${property("deps.ears")}"
}

processResources {
	inputs.properties 'version': version, 'group': project.group

	filesMatching('quilt.mod.json') {
		expand 'version': version,
				'group': project.group,
				'minecraft_version': mcVersion,
				'access_widener': awVersion,
				'modmenu_entrypoint': hasUi ? 'modmenu' : ''
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	// withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}

	exclude {
		it.name.endsWith('.accesswidener') && it.name != "${awVersion}.accesswidener"
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
